--[[
	Akali Elo Shower by Kn0wM3
	Hope you enjoy! 
	Please report bugs on the forum!
	
	Features:
			Combo Mode
			Harass Mode/Toggle
			Farming with Spells
			Lane Clear with spells
			Killsteal using Q,E,R,DFG,Ignite
			Supports all AP Items
			Supports SxOrbwalk,SAC:R,MMA
			AutoUpdate
			Damage Calculations
	
	Features(SOON):
			Improving of Killsteal
			SkinHack
			Packet Casting
			Overall Improvements
		
		Known Bugs:
			None
			Bugsplat at reload -Fixed
			
]]

require "spellDmg"
require "SxOrbWalk"
require "VPrediction"

local AUTO_UPDATE = true
local version = 1.01

if AUTO_UPDATE then
    local server_version = tonumber(GetWebResult("raw.github.com", "/Kn0wM3/BoLScripts/master/AkaliEloShowerVersion")) -- I have a file on my github which just shows the newest version, what I'm doing here is downloading it and comparing with the constant value above and if there is a newer version then go through the update process
    if server_version > version then 
        PrintChat("Script is outdated. Updating to version: " .. server_version .. "...")
        DownloadFile("https://raw.githubusercontent.com/Kn0wM3/BoLScripts/master/AkaliEloShower", SCRIPT_PATH .. "Akali Elo Shower.lua", function() -- Download the new script (we're overwriting the current one)
            PrintChat("Script updated. Please reload (Double F9).")
        end)
    end
    if server_version > version then return end -- Quit out the script as it will cause issues
		if server_version == version then
		PrintChat("<font color='#aaff34'>[Akali Elo Shower]Already newest Version!</font>")
		PrintChat("<font color='#aaff34'>[Akali Elo Shower]Thanks for using Akali Elo Shower, Report bugs on the forum!</font>")
	end
end

if myHero.charName ~= "Akali" then return end

local ts
local Qready, Wready, Eready, Rready, sac, mma = false
local Qrange, Erange, Rrange = 600, 325, 800

function OnLoad()
	Menu()
	
	enemyMinions = minionManager(MINION_ENEMY, Qrange, myHero, MINION_SORT_MAXHEALTH_DEC)
	
	killstring = {}
	
	Ignite = { name = "summonerdot", range = 600, slot = nil }
	Ignite.ready = (Ignite.slot ~= nil and myHero:CanUseSpell(Ignite.slot) == READY)
	
	Target = GetCustomTarget()
	SxOrb:ForceTarget(Target)
	lastSkin = 0
	
	if myHero:GetSpellData(SUMMONER_1).name:find(Ignite.name) then
		Ignite.slot = SUMMONER_1  
	elseif myHero:GetSpellData(SUMMONER_2).name:find(Ignite.name) then
		Ignite.slot = SUMMONER_2  
	end
end

function OnTick()
	Checks()
	
	if Config.combo.combo then Combo(Target) end
	if Config.harass.harass or Config.harass.harass2 then Harass(Target) end
	if Config.ks.ks then KillSteal() end
	if Config.farm.FarmCS then LastHitMode() end
	if Config.clear.clearCS then LaneClearMode() end
	if Config.misc.zhonyas.zhonyas then Zhonyas() end
	if Config.draw.DD then DmgCalc() end
end

function OnDraw()
	if not myHero.dead and not Config.draw.mdraw then
		if Config.draw.drawQ and Qready then
			DrawCircle(myHero.x, myHero.y, myHero.z, 600, RGB(Config.draw.qColor[2], Config.draw.qColor[2], Config.draw.qColor[4]))
		end
		if Config.draw.drawE and Eready then
			DrawCircle(myHero.x, myHero.y, myHero.z, 325, RGB(Config.draw.eColor[2], Config.draw.eColor[3], Config.draw.eColor[4]))
		end
		if Config.draw.drawR and Rready then
			DrawCircle(myHero.x, myHero.y, myHero.z, 800, RGB(Config.draw.rColor[2], Config.draw.rColor[3], Config.draw.rColor[4]))
		for _,enemy in pairs(GetEnemyHeroes()) do
            if ValidTarget(enemy) and killstring[enemy.networkID] ~= nil then
                local pos = WorldToScreen(D3DXVECTOR3(enemy.x, enemy.y, enemy.z))
                DrawText(killstring[enemy.networkID], 20, pos.x - 35, pos.y - 10, 0xFFFFFF00)
				end
			end
		end
	end
end

function Combo(unit)
	if ValidTarget(unit) and unit ~= nil and unit.type == myHero.type then
		if Config.combo.useItems then
			UseItems(unit)
		end
		if Config.combo.useR then
		CastR(unit)
		end
		if Config.combo.useW and Wready then
		CastSpell(_W, myHero.x, myHero.z)
		end
		if Config.combo.useQ then
		CastQ(unit)
		end
		if Config.combo.useE then
		CastE(unit)
		end
	end
end

function Harass(unit)
	if ValidTarget(unit) and unit ~= nil and unit.type == myHero.type then
		if Config.harass.useQ then 
		CastQ(unit)
		end
		if Config.harass.useE then
		CastE(unit)
		end
	end
end

function LastHitMode()
	enemyMinions:update()
		for i, minion in pairs(enemyMinions.objects) do
			if minion ~= nil then
				if ValidTarget(minion, Qrange) and Config.farm.useQ and Qready and not GetDistance(minion) <= Erange and Eready and getDmg("Q", minion, myHero) >= minion.health then
					CastSpell(_Q, minion)
				end
				if ValidTarget(minion, Erange) and Config.farm.useE and Eready and getDmg("E", minion, myHero) >= minion.health then 
					CastSpell(_E, minion)
			end
		end
	end
end

function LaneClearMode()
	enemyMinions:update()
		for i, minion in pairs(enemyMinions.objects) do
			if minion ~= nil then
				if ValidTarget(minion, Qrange) and Config.clear.useQ and Qready and getDmg("Q", minion, myHero) >= minion.health then
					CastSpell(_Q, minion)
				elseif ValidTarget(minion, Qrange) and Config.clear.useQ and Qready and getDmg("Q", minion, myHero) < minion.health then
					CastSpell(_Q, minion)
				end
				if ValidTarget(minion, Erange) and Config.clear.useE and Eready and getDmg("E", minion, myHero) >= minion.health then 
					CastSpell(_E, minion)
				elseif ValidTarget(minion, Erange) and Config.clear.useE and Eready and getDmg("E", minion, myHero) < minion.health then 
					CastSpell(_E, minion)
			end
		end
	end
end

function CastQ(unit)
	if unit ~= nil and unit.type == myHero.type and GetDistance(unit) <= Qrange and Qready then
		CastSpell(_Q, unit)
	end
end

function CastE(unit)
	if unit ~= nil and unit.type == myHero.type and GetDistance(unit) <= Erange and Eready then
		CastSpell(_E, unit)
	end
end

function CastR(unit)
	if unit ~= nil and unit.type == myHero.type and GetDistance(unit) <= Rrange and Rready then
		CastSpell(_R, unit)
	end
end

function KillSteal()
	for _, enemy in ipairs(GetEnemyHeroes()) do	
			local IDMG = (50 + (20 * myHero.level))
			local qDmg = getDmg("Q", enemy, myHero)
			local eDmg = getDmg("E", enemy, myHero)
			local rDmg = getDmg("R", enemy, myHero)
			local dfgslot = GetInventorySlotItem(3128)
			local dfgready = (DFGSlot ~= nil and myHero:CanUseSpell(DFGSlot) == READY)
			local DFGDMG = ((dfgslot and dfgready and getDmg("DFG", enemy, myHero)) or 0)
			if DFGDMG > 0 then
				QDMG = getDmg("Q", enemy, myHero, 3) * 1.2
				EDMG = getDmg("E", enemy, myHero) * 1.2
				RDMG = getDmg("R", enemy, myHero) * 1.2
			elseif DFGDMG == 0 then
				QDMG = getDmg("Q", enemy, myHero, 3)
				EDMG = getDmg("E", enemy, myHero)
				RDMG = getDmg("E", enemy, myHero)
			end
		if ValidTarget(enemy, Rrange) and enemy ~= nil and enemy.team ~= player.team and not enemy.dead and enemy.visible then
			if enemy.health <= qDmg and ValidTarget(enemy, Qrange) and Qready then
				CastQ(enemy)
			elseif enemy.health <= (qDmg + eDmg) and ValidTarget(enemy, Qrange) and Qready and Eready then
				CastQ(enemy)
				CastE(enemy)
			elseif enemy.health <= (qDmg + rDmg) and ValidTarget(enemy, Rrange) and Qready and Rready and Config.ks.useR then
				CastR(enemy)
				CastQ(enemy)
			elseif enemy.health <= (qDmg + IDMG) and ValidTarget(enemy, Qrange) and Qready and Igniteready then
				CastQ(enemy)
				CastSpell(Ignite.slot, enemy)
			elseif enemy.health <= eDmg and ValidTarget(enemy, Erange) and Eready then
				CastE(enemy)
			elseif enemy.health <= (eDmg + rDmg) and ValidTarget(enemy, Rrange) and Rready and Eready and Config.ks.useR then
				CastR(enemy)
				CastE(enemy)
			elseif enemy.health <= (eDmg + IDMG) and ValidTarget(enemy, Erange) and Eready and Igniteready then
				CastE(enemy)
				CastSpell(Ignite.slot, enemy)
			elseif enemy.health <= rDmg and ValidTarget(enemy, Rrange) and Rready and Config.ks.useR then
				CastR(enemy)
			elseif enemy.health <= (rDmg + IDMG) and ValidTarget(enemy, Rrange) and Rready and Igniteready and Config.ks.useR then
				CastR(enemy)
				CastSpell(Ignite.slot, enemy)
			elseif enemy.health <= (qDmg + eDmg + rDmg + IDMG) and ValidTarget(enemy, Rrange) and Qready and Eready and Rready and Config.ks.useR then
				CastR(enemy)
				CastQ(enemy)
				CastE(enemy)
				CastSpell(Ignite.slot, enemy)
			elseif enemy.health <= (qDmg + eDmg + rDmg) and ValidTarget(enemy, Rrange) and Qready and Eready and Rready and Config.ks.useR then
				CastR(enemy)
				CastE(enemy)
				CastQ(enemy)
			end
			if Config.ks.autoignite then AutoIgnite(enemy) end
		end
	end
end

function DmgCalc()
	for _,enemy in pairs(GetEnemyHeroes()) do
        if not enemy.dead and enemy.visible then
			local ADDMG = getDmg("P", enemy, myHero)
			local QDMG = getDmg("Q", enemy, myHero, 3)
			local EDMG = getDmg("E", enemy, myHero)
			local RDMG = getDmg("R", enemy, myHero)
			local IDMG = (50 + (20 * myHero.level))
			local hxgslot = GetInventorySlotItem(3146)
			local hxgready =(hxgslot ~= nil and myHero:CanUseSpell(hxgslot) == READY)
			local HXGDMG =((hxgslot and hxgready and getDmg("HXG", enemy, myHero)) or 0)
			local dfgslot = GetInventorySlotItem(3128)
			local dfgready = (dfgslot ~= nil and myHero:CanUseSpell(dfgslot) == READY)
			local DFGDMG = ((dfgslot and dfgready and getDmg("DFG", enemy, myHero)) or 0)
			if DFGDMG > 0 then
				QDMG2 = getDmg("Q", enemy, myHero) * 1.2
				EDMG2 = getDmg("E", enemy, myHero) * 1.2
				RDMG2 = getDmg("R", enemy, myHero) * 1.2
			else
				QDMG2 = 0
				EDMG2 = 0
				RDMG2 = 0
			end
			if enemy.health > (QDMG + EDMG + RDMG + IDMG + DFGDMG + HXGDMG + ADDMG) or enemy.health > (QDMG2 + EDMG2 + RDMG2 + IDMG+ DFGDMG + HXGDMG + ADDMG) then
				killstring[enemy.networkID] = "Harass Him!!!"
			elseif enemy.health < ADDMG then
				killstring[enemy.networkID] = "AA Kill!"
			elseif enemy.health < QDMG and (enemy.health > (QDMG + IDMG) or enemy.health > (QDMG2 + DFGDMG)) then
				killstring[enemy.networkID] = "Q Kill!"
			elseif enemy.health < (QDMG + IDMG) and (enemy.health > QDMG or enemy.health > (QDMG2 + DFGDMG)) then
				killstring[enemy.networkID] = "Q+Ignite Kill!"
			elseif enemy.health < (QDMG2 + DFGDMG) and (enemy.health > (QDMG + IDMG) or enemy.health > QDMG) then
				killstring[enemy.networkID] = "DFG+Q Kill!"	
			elseif enemy.health < EDMG and (enemy.health > (EDMG + IDMG) or enemy.health > (WDMG2 + DFGDMG)) then
				killstring[enemy.networkID] = "E Kill!"
			elseif enemy.health < (EDMG + IDMG) and (enemy.health > EDMG or enemy.health > (WDMG2 + DFGDMG)) then
				killstring[enemy.networkID] = "E+Ignite Kill!"	
			elseif enemy.health < (EDMG2 + DFGDMG) and (enemy.health > (EDMG + IDMG) or enemy.health > EDMG) then
				killstring[enemy.networkID] = "DFG+E Kill!"
			elseif enemy.health < RDMG and (enemy.health > (RDMG + IDMG) or enemy.health > (RDMG2 + DFGDMG)) then
				killstring[enemy.networkID] = "R Kill!"
			elseif enemy.health < (RDMG + IDMG) and (enemy.health > RDMG or enemy.health > (RDMG2 + DFGDMG)) then
				killstring[enemy.networkID] = "R+Ignite Kill!"	
			elseif enemy.health < (RDMG2 + DFGDMG) and (enemy.health > (RDMG + IDMG) or enemy.health > RDMG) then
				killstring[enemy.networkID] = "DFG+R Kill!"	
			elseif enemy.health < (QDMG + RDMG) then
				killstring[enemy.networkID] = "Q+R Kill!"
			elseif enemy.health < (QDMG + RDMG + IDMG) then
				killstring[enemy.networkID] = "Q+R+Ignite Kill!"	
			elseif enemy.health < (QDMG2 + RDMG2 + DFGDMG) then
				killstring[enemy.networkID] = "DFG+Q+R Kill!"
			elseif enemy.health < (EDMG + RDMG) then
				killstring[enemy.networkID] = "E+R Kill!"
			elseif enemy.health < (EDMG + RDMG + IDMG) then
				killstring[enemy.networkID] = "E+R+Ignite Kill!"	
			elseif enemy.health < (EDMG2 + RDMG2 + DFGDMG) then
				killstring[enemy.networkID] = "DFG+E+R Kill!"	
			elseif enemy.health < (QDMG + EDMG + RDMG) then
				killstring[enemy.networkID] = "Q+E+R Kill!"
			elseif enemy.health < (QDMG + EDMG + RDMG + IDMG) then
				killstring[enemy.networkID] = "Q+E+R+Ignite Kill!"
			elseif enemy.health < (QDMG2 + EDMG2 + RDMG2 + DFGDMG + ADDMG) then
				killstring[enemy.networkID] = "DFG+Q+E+R+AA Kill!"
			elseif enemy.health < (QDMG2 + EDMG2 + RDMG2 + DFGDMG + IDMG + ADDMG) then
				killstring[enemy.networkID] = "DFG+Q+E+R+AA+Ignite Kill!"
			elseif enemy.health < (QDMG2 + EDMG2 + RDMG2 + DFGDMG + HXGDMG + ADDDMG) then
				killstring[enemy.networkID] = "DFG+HXG+Q+E+R+AA KILL!"
			elseif enemy.health < (QDMG2 + EDMG2 + RDMG2 + DFGDMG + HXGDMG + IDMG + ADDDMG) then
				killstring[enemy.networkID] = "DFG+HXG+Q+E+R+AA+Ignite KILL!"
			end
		end
	end
end

function AutoIgnite(unit)
	if ValidTarget(unit, 600) and unit.health <= 50 + (20 * myHero.level) then
		if Igniteready then
			CastSpell(Ignite.slot, unit)
		end
	end
end

function Zhonyas()
	local zSlot = GetInventorySlotItem(3157)
		if zSlot ~= nil and myHero:CanUseSpell(zSlot) == READY then
			local health = myHero.health
				local mana = myHero.mana
				local maxHealth = myHero.maxHealth
				if (health / 100) <= Config.misc.zhonyas.zhonyasunder then
			CastSpell(zSlot)
		end
	end
end

function Checks()
	Qready = (myHero:CanUseSpell(_Q) == READY)
	Wready = (myHero:CanUseSpell(_W) == READY)
	Eready = (myHero:CanUseSpell(_E) == READY)
	Rready = (myHero:CanUseSpell(_R) == READY)
	
	Igniteready = (Ignite.slot ~= nil and myHero:CanUseSpell(Ignite.slot) == READY)
	
	TargetSelector:update()
	Target = GetCustomTarget()
	SxOrb:ForceTarget(Target)
	
	if sac or mma then
		SxOrb.SxOrbMenu.General.Enabled = false
	end
	
	if VIP_USER and Config.draw.lfc.lfc then _G.DrawCircle = DrawCircle2 
		else _G.DrawCircle = _G.oldDrawCircle end
end

function Menu()
	_G.oldDrawCircle = rawget(_G, 'DrawCircle')
	_G.DrawCircle = DrawCircle2	
	
	VP = VPrediction()
	
	Config = scriptConfig("Akali Elo Shower", "Akali1") 
	Config:addSubMenu("Combo Settings", "combo")
		Config.combo:addParam("combo", "Combo Mode", SCRIPT_PARAM_ONKEYDOWN, false, 32)
		Config.combo:addParam("combomode", "Combo Mode List", SCRIPT_PARAM_LIST, 1, {"RQWE", "QRWE"})
		Config.combo:addParam("useQ", "Use Q in Combo", SCRIPT_PARAM_ONOFF, true)
		Config.combo:addParam("useE", "Use E in Combo", SCRIPT_PARAM_ONOFF, true)
		Config.combo:addParam("useR", "Use R in Combo", SCRIPT_PARAM_ONOFF, true)
		Config.combo:addParam("useW", "Use W after ULT", SCRIPT_PARAM_ONOFF, true)
		Config.combo:addParam("comboItems", "Use Items in Combo", SCRIPT_PARAM_ONOFF, true)
	
	Config:addSubMenu("Harass Settings", "harass")
		Config.harass:addParam("harass", "Harass Mode", SCRIPT_PARAM_ONKEYDOWN, false, string.byte("V"))
		Config.harass:addParam("harass2", "Harass Toggle Mode", SCRIPT_PARAM_ONKEYTOGGLE, false, GetKey("U"))
		Config.harass:addParam("useQ", "Use Q to Harass", SCRIPT_PARAM_ONOFF, true)
		Config.harass:addParam("useE", "Use E to Harass", SCRIPT_PARAM_ONOFF, true)
	
	Config:addSubMenu("Farm Settings", "farm")
		Config.farm:addParam("FarmCS", "Farm Mode", SCRIPT_PARAM_ONKEYDOWN, false, GetKey("C"))
		Config.farm:addParam("useQ", "Use Q to Farm", SCRIPT_PARAM_ONOFF, false)
		Config.farm:addParam("useE", "Use E to Farm", SCRIPT_PARAM_ONOFF, true)
		
	Config:addSubMenu("Laneclear Settings", "clear")
		Config.clear:addParam("clearCS", "Lane Clear Mode", SCRIPT_PARAM_ONKEYDOWN, false, GetKey("V"))
		Config.clear:addParam("useQ", "Use Q to Clear", SCRIPT_PARAM_ONOFF, false)
		Config.clear:addParam("useE", "Use E to Clear", SCRIPT_PARAM_ONOFF, true)
	--if VIP_USER then
	Config:addSubMenu("Misc Settings", "misc")
		--Config.misc:addParam("skinList", "Choose your skin", SCRIPT_PARAM_LIST,	7, { "Stinger", "Crimson","All-Star", "Nurse", "Silverfang", "Blood Moon", "Classic" })
	--end	
		Config.misc:addParam("autolevel", "Auto Level Skills", SCRIPT_PARAM_ONOFF, false)
		Config.misc:addParam("autolevel2", "Auto Level Sequence", SCRIPT_PARAM_LIST, 1, { "R>Q>E>W", "R>E>Q>W" })
		Config.misc:addSubMenu("Zhonyas", "zhonyas")
		Config.misc.zhonyas:addParam("zhonyas", "Auto Zhonyas", SCRIPT_PARAM_ONOFF, true)
		Config.misc.zhonyas:addParam("zhonyasunder", "Use Zhonyas under % health", SCRIPT_PARAM_SLICE, 20, 0, 100 ,200)
		
	Config:addSubMenu("Killsteal Settings", "ks")
		Config.ks:addParam("ks", "Use SmartKS", SCRIPT_PARAM_ONOFF, true)
		Config.ks:addParam("useR", "Use R to KS(Risky!)", SCRIPT_PARAM_ONOFF, true)
		Config.ks:addParam("autoignite", "Auto Ignite to KS", SCRIPT_PARAM_ONOFF, true)
		
	Config:addSubMenu("Draw Setttings", "draw")
		Config.draw:addParam("mdraw", "Disable all Drawings", SCRIPT_PARAM_ONOFF, false)
		Config.draw:addParam("DD", "Draw Dmg Text", SCRIPT_PARAM_ONOFF, true)
		Config.draw:addParam("drawQ", "Draw Q Range", SCRIPT_PARAM_ONOFF, true)
		Config.draw:addParam("qColor", "Draw (Q) Color", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})
		Config.draw:addParam("drawE", "Draw E Range", SCRIPT_PARAM_ONOFF, true)
		Config.draw:addParam("eColor", "Draw (E) Color", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})
		Config.draw:addParam("drawR", "Draw R Range", SCRIPT_PARAM_ONOFF, true)
		Config.draw:addParam("rColor", "Draw (R) Color", SCRIPT_PARAM_COLOR, {255, 255, 255, 255})
		--if VIP_USER then
		Config.draw:addSubMenu("Lag Free Circles", "lfc")	
			Config.draw.lfc:addParam("lfc", "Lag Free Circles", SCRIPT_PARAM_ONOFF, false)
			Config.draw.lfc:addParam("CL", "Quality", 4, 75, 75, 2000, 0)
			Config.draw.lfc:addParam("Width", "Width", 4, 1, 1, 10, 0)
		--end
	Config:addSubMenu("Orbwalker", "Orbwalking")
		SxOrb:LoadToMenu(Config.Orbwalking)
		
	TargetSelector = TargetSelector(TARGET_LESS_CAST_PRIORITY, Qrange, DAMAGE_MAGIC, true)
	TargetSelector.name = "Akali"
	Config:addTS(TargetSelector)
	
	if _G.MMA_Loaded then
		print("<b><font color=\"#FF0000\">Akali Elo Shower:</font></b> <font color=\"#FFFFFF\">MMA Support Loaded.</font>")
		mma = true
	end	
	if _G.AutoCarry then
		print("<b><font color=\"#FF0000\">Akali Elo Shower:</font></b> <font color=\"#FFFFFF\">SAC Support Loaded.</font>")
		sac = true
	end

end

function Variables()
	
	Ignite = { name = "summonerdot", range = 600, slot = nil }
	
	enemyMinions = minionManager(MINION_ENEMY, Qrange, myHero, MINION_SORT_MAXHEALTH_DEC)
	
	VP = VPrediction()
	
	_G.oldDrawCircle = rawget(_G, 'DrawCircle')
	_G.DrawCircle = DrawCircle2	
	
	lastSkin = 0
	
	if myHero:GetSpellData(SUMMONER_1).name:find(Ignite.name) then
		Ignite.slot = SUMMONER_1
	elseif myHero:GetSpellData(SUMMONER_2).name:find(Ignite.name) then
		Ignite.slot = SUMMONER_2
	end
	
	Items = {
		["BLACKFIRE"]	= { id = 3188, range = 750, ready = false, dmg = 0 },
		["BRK"]			= { id = 3153, range = 500, ready = false, dmg = 0 },
		["BWC"]			= { id = 3144, range = 450, ready = false, dmg = 0 },
		["DFG"]			= { id = 3128, range = 750, ready = false, dmg = 0 },
		["HXG"]			= { id = 3146, range = 700, ready = false, dmg = 0 },
		["ODYNVEIL"]	= { id = 3180, range = 525, ready = false, dmg = 0 },
		["DVN"]			= { id = 3131, range = 200, ready = false, dmg = 0 },
		["ENT"]			= { id = 3184, range = 350, ready = false, dmg = 0 },
		["HYDRA"]		= { id = 3074, range = 350, ready = false, dmg = 0 },
		["TIAMAT"]		= { id = 3077, range = 350, ready = false, dmg = 0 },
		["YGB"]			= { id = 3142, range = 350, ready = false, dmg = 0 }
	}
end

function UseItems(unit)
	for i, item in ipairs(Items) do
		if GetIventoryItemIsCastable(item.id) and GetDistanceSqr(unit) <= item.range*item.range then
		CastItem(item.id,unit)
		end
	end
end

function getHitBoxRadius(target)
	return GetDistance(target.minBBox, target.maxBBox)/2
end

function GetCustomTarget()
 	TargetSelector:update() 	
	if _G.MMA_Target and _G.MMA_Target.type == myHero.type then return _G.MMA_Target end
	if _G.AutoCarry and _G.AutoCarry.Crosshair and _G.AutoCarry.Attack_Crosshair and _G.AutoCarry.Attack_Crosshair.target and _G.AutoCarry.Attack_Crosshair.target.type == myHero.type then return _G.AutoCarry.Attack_Crosshair.target end
	return TargetSelector.target
end

-- Lag Free Circles
function DrawCircleNextLvl(x, y, z, radius, width, color, chordlength)
  radius = radius or 300
  quality = math.max(8,round(180/math.deg((math.asin((chordlength/(2*radius)))))))
  quality = 2 * math.pi / quality
  radius = radius*.92
  
  local points = {}
  for theta = 0, 2 * math.pi + quality, quality do
    local c = WorldToScreen(D3DXVECTOR3(x + radius * math.cos(theta), y, z - radius * math.sin(theta)))
    points[#points + 1] = D3DXVECTOR2(c.x, c.y)
  end
  
  DrawLines2(points, width or 1, color or 4294967295)
end

function round(num) 
  if num >= 0 then return math.floor(num+.5) else return math.ceil(num-.5) end
end

function DrawCircle2(x, y, z, radius, color)
  local vPos1 = Vector(x, y, z)
  local vPos2 = Vector(cameraPos.x, cameraPos.y, cameraPos.z)
  local tPos = vPos1 - (vPos1 - vPos2):normalized() * radius
  local sPos = WorldToScreen(D3DXVECTOR3(tPos.x, tPos.y, tPos.z))
  
  if OnScreen({ x = sPos.x, y = sPos.y }, { x = sPos.x, y = sPos.y }) then
    DrawCircleNextLvl(x, y, z, radius, Config.draw.lfc.Width, color, Config.draw.lfc.CL) 
	end
end
